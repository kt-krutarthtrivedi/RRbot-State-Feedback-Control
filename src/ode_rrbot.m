% Robot Controls - State Feedback Control for RRbot Manipulator
% Author: Krutarth Trivedi | ktrivedi@wpi.edu

function dX = ode_rrbot(t,X)

global K;
% implementing the state-feedback controller using the control law

m1 = 1; r1 = 0.45; l1 = 1; I1 = 0.084;
m2 = 1; r2 = 0.45; l2 = 1; I2 = 0.084;
g = 9.81;

dX = zeros(4,1);
X = num2cell(X);
[theta1, theta2, theta1_dot, theta2_dot] = deal(X{:});

u = -K * [theta1; theta2; theta1_dot; theta2_dot];
t1 = u(1);
t2 = u(2);

dX(1) = theta1_dot;
dX(2) = theta2_dot;
dX(3) = (I2*t1 - I2*t2 + m2*r2^2*t1*cos(theta1 + theta2)^2 - m2*r2^2*t2*cos(theta1 + theta2)^2 + m2*r2^2*t1*sin(theta1 + theta2)^2 - m2*r2^2*t2*sin(theta1 + theta2)^2 + I2*g*l1*m2*sin(theta1) + I2*g*m1*r1*sin(theta1) + l1*m2^2*r2^3*cos(theta1)*sin(theta1 + theta2)^3*theta1_dot^2 - l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)^3*theta1_dot^2 + l1*m2^2*r2^3*cos(theta1)*sin(theta1 + theta2)^3*theta2_dot^2 - l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)^3*theta2_dot^2 - l1*m2*r2*t2*sin(theta1)*sin(theta1 + theta2) + g*l1*m2^2*r2^2*sin(theta1)*cos(theta1 + theta2)^2 - l1*m2*r2*t2*cos(theta1)*cos(theta1 + theta2) - l1^2*m2^2*r2^2*sin(theta1)^2*cos(theta1 + theta2)*sin(theta1 + theta2)*theta1_dot^2 + I2*l1*m2*r2*cos(theta1)*sin(theta1 + theta2)*theta1_dot^2 - I2*l1*m2*r2*sin(theta1)*cos(theta1 + theta2)*theta1_dot^2 + I2*l1*m2*r2*cos(theta1)*sin(theta1 + theta2)*theta2_dot^2 - I2*l1*m2*r2*sin(theta1)*cos(theta1 + theta2)*theta2_dot^2 + g*m1*m2*r1*r2^2*sin(theta1)*cos(theta1 + theta2)^2 + g*m1*m2*r1*r2^2*sin(theta1)*sin(theta1 + theta2)^2 - g*l1*m2^2*r2^2*cos(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2) + 2*l1*m2^2*r2^3*cos(theta1)*sin(theta1 + theta2)^3*theta1_dot*theta2_dot - 2*l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)^3*theta1_dot*theta2_dot + l1*m2^2*r2^3*cos(theta1)*cos(theta1 + theta2)^2*sin(theta1 + theta2)*theta1_dot^2 + l1*m2^2*r2^3*cos(theta1)*cos(theta1 + theta2)^2*sin(theta1 + theta2)*theta2_dot^2 - l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2)^2*theta1_dot^2 - l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2)^2*theta2_dot^2 - l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*cos(theta1 + theta2)^2*theta1_dot^2 + l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*sin(theta1 + theta2)^2*theta1_dot^2 + l1^2*m2^2*r2^2*cos(theta1)^2*cos(theta1 + theta2)*sin(theta1 + theta2)*theta1_dot^2 + 2*l1*m2^2*r2^3*cos(theta1)*cos(theta1 + theta2)^2*sin(theta1 + theta2)*theta1_dot*theta2_dot - 2*l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2)^2*theta1_dot*theta2_dot + 2*I2*l1*m2*r2*cos(theta1)*sin(theta1 + theta2)*theta1_dot*theta2_dot - 2*I2*l1*m2*r2*sin(theta1)*cos(theta1 + theta2)*theta1_dot*theta2_dot)/(I1*I2 + I2*l1^2*m2*cos(theta1)^2 + I2*m1*r1^2*cos(theta1)^2 + I2*l1^2*m2*sin(theta1)^2 + I2*m1*r1^2*sin(theta1)^2 + I1*m2*r2^2*cos(theta1 + theta2)^2 + I1*m2*r2^2*sin(theta1 + theta2)^2 + l1^2*m2^2*r2^2*cos(theta1)^2*sin(theta1 + theta2)^2 + l1^2*m2^2*r2^2*sin(theta1)^2*cos(theta1 + theta2)^2 + m1*m2*r1^2*r2^2*cos(theta1)^2*cos(theta1 + theta2)^2 + m1*m2*r1^2*r2^2*cos(theta1)^2*sin(theta1 + theta2)^2 + m1*m2*r1^2*r2^2*sin(theta1)^2*cos(theta1 + theta2)^2 + m1*m2*r1^2*r2^2*sin(theta1)^2*sin(theta1 + theta2)^2 - 2*l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2));
dX(4) = (I1*t2 - I2*t1 + I2*t2 - m2*r2^2*t1*cos(theta1 + theta2)^2 + m2*r2^2*t2*cos(theta1 + theta2)^2 - m2*r2^2*t1*sin(theta1 + theta2)^2 + m2*r2^2*t2*sin(theta1 + theta2)^2 + l1^2*m2*t2*cos(theta1)^2 + m1*r1^2*t2*cos(theta1)^2 + l1^2*m2*t2*sin(theta1)^2 + m1*r1^2*t2*sin(theta1)^2 - I2*g*l1*m2*sin(theta1) - I2*g*m1*r1*sin(theta1) + I1*g*m2*r2*sin(theta1 + theta2) - l1*m2^2*r2^3*cos(theta1)*sin(theta1 + theta2)^3*theta1_dot^2 + l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)^3*theta1_dot^2 - l1^3*m2^2*r2*cos(theta1)^3*sin(theta1 + theta2)*theta1_dot^2 + l1^3*m2^2*r2*sin(theta1)^3*cos(theta1 + theta2)*theta1_dot^2 - l1*m2^2*r2^3*cos(theta1)*sin(theta1 + theta2)^3*theta2_dot^2 + l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)^3*theta2_dot^2 - l1*m2*r2*t1*sin(theta1)*sin(theta1 + theta2) + 2*l1*m2*r2*t2*sin(theta1)*sin(theta1 + theta2) - g*l1*m2^2*r2^2*sin(theta1)*cos(theta1 + theta2)^2 + g*l1^2*m2^2*r2*cos(theta1)^2*sin(theta1 + theta2) - l1*m2*r2*t1*cos(theta1)*cos(theta1 + theta2) + 2*l1*m2*r2*t2*cos(theta1)*cos(theta1 + theta2) + 2*l1^2*m2^2*r2^2*sin(theta1)^2*cos(theta1 + theta2)*sin(theta1 + theta2)*theta1_dot^2 + l1^2*m2^2*r2^2*sin(theta1)^2*cos(theta1 + theta2)*sin(theta1 + theta2)*theta2_dot^2 - g*l1^2*m2^2*r2*cos(theta1)*sin(theta1)*cos(theta1 + theta2) - I1*l1*m2*r2*cos(theta1)*sin(theta1 + theta2)*theta1_dot^2 + I1*l1*m2*r2*sin(theta1)*cos(theta1 + theta2)*theta1_dot^2 - I2*l1*m2*r2*cos(theta1)*sin(theta1 + theta2)*theta1_dot^2 + I2*l1*m2*r2*sin(theta1)*cos(theta1 + theta2)*theta1_dot^2 - I2*l1*m2*r2*cos(theta1)*sin(theta1 + theta2)*theta2_dot^2 + I2*l1*m2*r2*sin(theta1)*cos(theta1 + theta2)*theta2_dot^2 - g*m1*m2*r1*r2^2*sin(theta1)*cos(theta1 + theta2)^2 + g*m1*m2*r1^2*r2*cos(theta1)^2*sin(theta1 + theta2) - g*m1*m2*r1*r2^2*sin(theta1)*sin(theta1 + theta2)^2 + g*m1*m2*r1^2*r2*sin(theta1)^2*sin(theta1 + theta2) + l1^3*m2^2*r2*cos(theta1)^2*sin(theta1)*cos(theta1 + theta2)*theta1_dot^2 + g*l1*m2^2*r2^2*cos(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2) - l1^3*m2^2*r2*cos(theta1)*sin(theta1)^2*sin(theta1 + theta2)*theta1_dot^2 - 2*l1*m2^2*r2^3*cos(theta1)*sin(theta1 + theta2)^3*theta1_dot*theta2_dot + 2*l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)^3*theta1_dot*theta2_dot - l1*m2^2*r2^3*cos(theta1)*cos(theta1 + theta2)^2*sin(theta1 + theta2)*theta1_dot^2 - l1*m2^2*r2^3*cos(theta1)*cos(theta1 + theta2)^2*sin(theta1 + theta2)*theta2_dot^2 + l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2)^2*theta1_dot^2 + l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2)^2*theta2_dot^2 + 2*l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*cos(theta1 + theta2)^2*theta1_dot^2 + l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*cos(theta1 + theta2)^2*theta2_dot^2 - 2*l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*sin(theta1 + theta2)^2*theta1_dot^2 - l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*sin(theta1 + theta2)^2*theta2_dot^2 - 2*l1^2*m2^2*r2^2*cos(theta1)^2*cos(theta1 + theta2)*sin(theta1 + theta2)*theta1_dot^2 - l1^2*m2^2*r2^2*cos(theta1)^2*cos(theta1 + theta2)*sin(theta1 + theta2)*theta2_dot^2 - 2*l1*m2^2*r2^3*cos(theta1)*cos(theta1 + theta2)^2*sin(theta1 + theta2)*theta1_dot*theta2_dot + 2*l1*m2^2*r2^3*sin(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2)^2*theta1_dot*theta2_dot + 2*l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*cos(theta1 + theta2)^2*theta1_dot*theta2_dot - 2*l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*sin(theta1 + theta2)^2*theta1_dot*theta2_dot - g*l1*m1*m2*r1*r2*sin(theta1)^2*sin(theta1 + theta2) - 2*l1^2*m2^2*r2^2*cos(theta1)^2*cos(theta1 + theta2)*sin(theta1 + theta2)*theta1_dot*theta2_dot - l1*m1*m2*r1^2*r2*cos(theta1)^3*sin(theta1 + theta2)*theta1_dot^2 + l1*m1*m2*r1^2*r2*sin(theta1)^3*cos(theta1 + theta2)*theta1_dot^2 + 2*l1^2*m2^2*r2^2*sin(theta1)^2*cos(theta1 + theta2)*sin(theta1 + theta2)*theta1_dot*theta2_dot - 2*I2*l1*m2*r2*cos(theta1)*sin(theta1 + theta2)*theta1_dot*theta2_dot + 2*I2*l1*m2*r2*sin(theta1)*cos(theta1 + theta2)*theta1_dot*theta2_dot - g*l1*m1*m2*r1*r2*cos(theta1)*sin(theta1)*cos(theta1 + theta2) + l1*m1*m2*r1^2*r2*cos(theta1)^2*sin(theta1)*cos(theta1 + theta2)*theta1_dot^2 - l1*m1*m2*r1^2*r2*cos(theta1)*sin(theta1)^2*sin(theta1 + theta2)*theta1_dot^2)/(I1*I2 + I2*l1^2*m2*cos(theta1)^2 + I2*m1*r1^2*cos(theta1)^2 + I2*l1^2*m2*sin(theta1)^2 + I2*m1*r1^2*sin(theta1)^2 + I1*m2*r2^2*cos(theta1 + theta2)^2 + I1*m2*r2^2*sin(theta1 + theta2)^2 + l1^2*m2^2*r2^2*cos(theta1)^2*sin(theta1 + theta2)^2 + l1^2*m2^2*r2^2*sin(theta1)^2*cos(theta1 + theta2)^2 + m1*m2*r1^2*r2^2*cos(theta1)^2*cos(theta1 + theta2)^2 + m1*m2*r1^2*r2^2*cos(theta1)^2*sin(theta1 + theta2)^2 + m1*m2*r1^2*r2^2*sin(theta1)^2*cos(theta1 + theta2)^2 + m1*m2*r1^2*r2^2*sin(theta1)^2*sin(theta1 + theta2)^2 - 2*l1^2*m2^2*r2^2*cos(theta1)*sin(theta1)*cos(theta1 + theta2)*sin(theta1 + theta2));

end